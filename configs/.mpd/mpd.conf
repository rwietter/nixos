# ================================================================= #
#               MPD (Music Player Daemon) Configuration             #
# ================================================================= #
#
# This file configures the behavior of the Music Player Daemon.
# Lines starting with '#' are comments and are ignored.

# ----------------------------------------------------------------- #
# Required File Paths
# ----------------------------------------------------------------- #
# It's best practice to keep all MPD-related files in a dedicated
# directory within your home folder, like ~/.mpd/ or ~/.config/mpd/.
# Using /tmp is not recommended as it is often cleared on reboot.

music_directory         "~/Músicas"               # The directory where your music files are stored.
playlist_directory      "~/.mpd/playlists"        # The directory where you want to save playlists.
db_file                 "~/.cache/mpd/database"   # The location of the music database cache.
log_file                "~/.cache/mpd/mpd.log"    # The location for the log file, useful for debugging.
pid_file                "/tmp/mpd.pid"            # The file where MPD stores its process ID.
state_file              "~/.cache/mpd/state"      # Remembers the player state (current song, volume, etc.) between restarts.
log_level               "verbose"                 # The level of detail in the log file (verbose, info, notice)

# ----------------------------------------------------------------- #
# Connection Settings
# ----------------------------------------------------------------- #
# These settings define how clients (like ncmpcpp) connect to MPD.
# You can have MPD listen on a network socket, a local Unix socket, or both.

# Listen on the local network interface (localhost). Allows clients on the
# same machine to connect via IP address.
bind_to_address         "127.0.0.1"

# Listen on your Tailscale IP address. Allows clients from your Tailscale
# network to connect.
bind_to_address         "100.89.117.88"

# Listen on a local Unix domain socket. This is often faster than a network
# socket for clients running on the same machine.
bind_to_address         "/tmp/mpd.socket"

# The network port for MPD to listen on for commands.
port                    "6600"

# Use the 'soxr' resampler for high-quality audio processing.
resampler {
  plugin "soxr"
  quality "very high"
  threads "4"
}

# Use the 'route' filter to route audio channels. This is useful for multi-channel audio setups.
filter {
  plugin "route"
  routes "0>0, 1>1, 0>2, 1>3"
}

# music_directory "https://app.koofr.net/dav/Koofr"

# ----------------------------------------------------------------- #
# General Settings
# ----------------------------------------------------------------- #

# The system user that MPD should run as.
user                    "rwietter"

# Automatically scan the music_directory for new files.
auto_update             "yes"

# If playback was paused when MPD was shut down, it will be paused
# when MPD is started again.
restore_paused          "yes"

# The character set for filesystem metadata. UTF-8 is standard.
filesystem_charset      "UTF-8"

# The type of volume mixer to use. 'software' is the most compatible,
# as it gives MPD its own volume control independent of the system.
mixer_type              "software"

# Enables ReplayGain scanning to normalize volume across tracks.
# 'track' mode adjusts volume on a per-track basis.
replaygain              "track"

# The size of the audio buffer in samples. This can help prevent dropouts.
audio_buffer_size       "2048"

# ================================================================= #
#                         AUDIO OUTPUTS                             #
# ================================================================= #
# This is the most critical section. You need at least one valid
# audio output for sound to play. The previous configuration had
# invalid parameters here.

# --- PRIMARY AUDIO OUTPUT: PipeWire ---
# This is the recommended output for modern Linux systems (Fedora,
# Arch, Ubuntu 22.04+, etc.). It is simple and works out-of-the-box.
# Note: A 'pipewire' output only needs 'type' and 'name'. All other
# parameters like 'port', 'encoder', 'path' are invalid for this type.
audio_output {
    type                "pipewire"
    name                "PipeWire Sound Server"
    format              "48000:16:1"
    encoder             "flac"
    compression         "8"
}

# --- ALTERNATIVE AUDIO OUTPUT: ALSA ---
# Use this only if you are not using PipeWire. Uncomment this section
# and comment out the PipeWire section above.
# audio_output {
#   type                  "alsa"
#   name                  "My ALSA Output"
#   device                "default" # Use the system's default ALSA device
# }

# --- OPTIONAL OUTPUT: FIFO for Visualizers ---
# This output does not produce sound. Instead, it sends raw audio data
# to a special file (a 'FIFO' or 'named pipe'). Programs like 'cava'
# or 'glava' can read from this file to create audio visualizers.
audio_output {
   type                  "fifo"
   name                  "FIFO for Visualizer"
   path                  "/tmp/mpd.fifo"
   format                "44100:16:2"
}

# --- SAÍDA DE STREAMING HTTP (para ouvir no celular, etc.) ---
# audio_output {
# 	type		               "httpd"
# 	name		               "My HTTP Stream"
#   bind_to_address        "100.89.117.88"
# 	port		               "8080"
# }

audio_output {
	type		"httpd"
	name		"My HTTP Stream"
	encoder		"opus"		# optional
	port		"8000"
#	quality		"5.0"			# do not define if bitrate is defined
	bitrate		"128000"			# do not define if quality is defined
	format		"48000:16:1"
	always_on       "yes"			# prevent MPD from disconnecting all listeners when playback is stopped.
	tags            "yes"			# httpd supports sending tags to listening streams.
}
